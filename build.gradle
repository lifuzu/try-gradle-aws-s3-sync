// Gradle Script
buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath "com.weimed.gradle-plugins:gradle-aws-s3-sync:0.7.+"
    }
}

import com.weimed.gradle.plugin.aws.s3.*

ext {
    aws = [accessKey: awsAccessKey, secretKey: awsSecretKey]
    s3 = [bucket: "haituan.us", destination: "hello.txt"]
    local = [directory: "pool"]
}

task s3upload(type: S3Sync){
    description = "Deploys artifacts on a s3 bucket."

    accessKey aws.accessKey
    secretKey aws.secretKey

    configFile "synchronizer.properties"
    keepFiles = true

    from local.directory
    into s3.bucket
}

task s3replace(type: S3Sync){
    description = "Replace artifacts on a s3 bucket."

    accessKey aws.accessKey
    secretKey aws.secretKey

    configFile "synchronizer.properties"

    from local.directory + "/latest"
    into s3.bucket + "/latest"
}

task s3download(type: S3Sync){
    description = "Fetchs artifacts from a s3 bucket."

    accessKey aws.accessKey
    secretKey aws.secretKey

    configFile "synchronizer.properties"
    keepFiles = true
    action = "DOWN"

    from s3.bucket
    into local.directory
}

task s3delete(type: S3Delete) {
    description = "Delete artifact from a s3 bucket."

    accessKey aws.accessKey
    secretKey aws.secretKey

    configFile "synchronizer.properties"

    from s3.bucket
    if (project.hasProperty("destination")) {
        delete project.getProperty("destination")
    } else {
        delete s3.destination
    }
}

task s3purge(type: S3Purge) {
    description = "Purge all artifacts from a s3 bucket."

    accessKey aws.accessKey
    secretKey aws.secretKey

    configFile "synchronizer.properties"

    from s3.bucket + '/snapshot'
}

task s3list(type: S3List) {
    description = "List all artifacts from a s3 bucket."

    accessKey aws.accessKey
    secretKey aws.secretKey

    configFile "synchronizer.properties"

    from s3.bucket
    if (project.hasProperty("destination")) {
        into project.getProperty("destination")
    }
}
